package cardgames;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Stack;

import player.Player;
import cards.Card;

@SuppressWarnings("serial")
public class War extends CardGame implements Serializable{

	private ArrayList<Player> players;
	private Stack<Card> winnings;
	
	public War(ArrayList<Player> playerNames){
		this.players = playerNames;
		CardGame cardGame = new CardGame(this.players);
		cardGame.connect();
		play();
	}

	private void roundWin(Player winner){
		while(!this.winnings.empty()){
			winner.addCardToHand((Card)this.winnings.remove(0));
		}
	}

	private void roundTie(){
		Card p1Down = this.players.get(0).playTopCard();
		this.winnings.push(p1Down);
		Card p1Up = this.players.get(0).playTopCard();
		this.winnings.push(p1Up);
		
		Card p2Down = this.players.get(1).playTopCard();
		this.winnings.push(p2Down);
		Card p2Up = this.players.get(1).playTopCard();
		this.winnings.push(p2Up);

		this.score(p1Up,p2Up);
	}

	private void score(Card c1, Card c2){
		if(c1.getPower() > c2.getPower()){
			roundWin(this.players.get(0));
		} else if(c1.getPower() < c2.getPower()){
			roundWin(this.players.get(1));
		} else {
			roundTie();
		}
	}

	private void win(Player winner){
		// tell server who won
	}

	public void play(){

		while(this.p1.hand.length != 0 || this.p2.hand.length != 0){
			Card p1Card = this.p1.hand.playTopCard();
			this.winnings.push(p1Card);
			Card p2Card = this.p2.hand.playTopCard();
			this.winnings.push(p2Card);

			this.score(p1Card, p2Card);
		}
		if(this.p1.hand.empty()){
			this.win(p2);
		} else {
			this.win(p1);
		}
	}
}
