package controller;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;

import misc.ChatEntry;
import misc.GameLobby;
import misc.GameLobbyRequest;
import misc.Request;
import misc.UpdateGameRequest;
import player.AchievementRequest;
import player.Friend;
import player.NewFriendRequest;
import player.NewPlayerRequest;
import player.Player;
import player.SetPasswordRequest;
import cardgames.CardGame;

/**
 * @author Richard Phifer<rsphifer@purdue.edu>
 * @date Oct 11, 2014
 * 
 *       Provides an interface for the client application to send and receive
 *       communications from the server.
 *
 */
public class ServerAccess {

	private static final String HOST_NAME = "sac07.cs.purdue.edu";
	private static final int PORT_NUMBER = 4000;

	private static Object sendRequestWithResponse(Request request) {
		try {
			/* Try to connect to server */
			Socket serverSocket = new Socket(HOST_NAME, PORT_NUMBER);

			/* Open output stream and write request to server */
			ObjectOutputStream oos = new ObjectOutputStream(
					serverSocket.getOutputStream());
			oos.writeObject(request);
			oos.flush();

			/* Open input stream and read server response */
			ObjectInputStream ois = new ObjectInputStream(
					serverSocket.getInputStream());
			Object response = ois.readObject();
			oos.close();
			ois.close();

			serverSocket.close();
			return response;

		} catch (Exception e) {
			return null;
		}

	}

	/*********************************************************
	 * War specific server calls.
	 *********************************************************/

	public static Object incrementWarCounter(UpdateGameRequest ugr) {
		Request request = new Request("incrementWarCounter", ugr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	/*********************************************************
	 * Card game mgmt server calls.
	 *********************************************************/

	public static Object getCardGame(int gameId) {
		Request request = new Request("getCardGame", gameId);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (CardGame)obj; 
		} else {
			return null;
		}
	}

	public static Object updateCardGameState(int gameId, CardGame game) {
		Request request = new Request("updateCardGame", new UpdateGameRequest(
				gameId, game));
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static int createNewGame(CardGame game) {
		Request request = new Request("createGame", game);
		return (int) sendRequestWithResponse(request);
	}

	/*********************************************************
	 * Account creation.
	 *********************************************************/

	public static Object createNewAccount(NewPlayerRequest player) {
		Request request = new Request("createAccount", player);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	/*********************************************************
	 * Login, logout, and password mgmt calls.
	 *********************************************************/

	public static Player loginRequest(NewPlayerRequest player) {
		Request request = new Request("login", player);
		Player tmp = (Player) sendRequestWithResponse(request);
		return tmp;
	}

	public static Object logoutRequest(Player player) {
		Request request = new Request("logout", player);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static Object retrievePassword(NewPlayerRequest player) {
		Request request = new Request("retrievePassword", player);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static Object setPassword(SetPasswordRequest spr) {
		Request request = new Request("resetPassword", spr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	/*********************************************************
	 * Game lobby mgmt server calls.
	 *********************************************************/
	public static Object joinLobby(GameLobbyRequest glr) {
		Request request = new Request("joinGameLobby", glr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static Object leaveLobby(GameLobbyRequest glr) {
		Request request = new Request("leaveGameLobby", glr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static GameLobby[] getGameLobbyList(GameLobbyRequest glr) {
		Request request = new Request("getGameLobbyList", glr);
		return (GameLobby[]) sendRequestWithResponse(request);
	}

	public static Object startGameFromLobby(GameLobbyRequest glr) {
		Request request = new Request("startGameFromLobby", glr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	/*********************************************************
	 * Achievement server calls.
	 *********************************************************/

	public static float getWinRatio(AchievementRequest ar) {
		Request request = new Request("getWinRatio", ar);
		return (float) sendRequestWithResponse(request);
	}

	public static int getNumGames(AchievementRequest ar) {
		Request request = new Request("getNumGames", ar);
		return (int) sendRequestWithResponse(request);
	}

	public static int getNumWins(AchievementRequest ar) {
		Request request = new Request("getNumWins", ar);
		return (int) sendRequestWithResponse(request);
	}

	public static Object incrementNumWins(AchievementRequest ar) {
		Request request = new Request("incrementNumWins", ar);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static Object incrementNumGames(AchievementRequest ar) {
		Request request = new Request("incrementNumGames", ar);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	/*********************************************************
	 * Friend list mgmt server calls.
	 *********************************************************/

	public static Object addFriend(NewFriendRequest nfr) {
		Request request = new Request("addFriend", nfr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	public static Object removeFriend(NewFriendRequest nfr) {
		Request request = new Request("removeFriend", nfr);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public static ArrayList<Friend> getFriends(Player player) {
		Request request = new Request("getFriends", player);
		return (ArrayList<Friend>) sendRequestWithResponse(request);
	}

	/*********************************************************
	 * Game menu chat mgmt server calls.
	 *********************************************************/
	public static Object addMenuChatEntry(ChatEntry newEntry) {
		Request request = new Request("updateMenuChat", newEntry);
		Object obj = sendRequestWithResponse(request);
		if (obj != null) {
			return (boolean) obj;
		} else {
			return null;
		}
	}

	@SuppressWarnings("unchecked")
	public static ArrayList<ChatEntry> getMenuChat() {
		Request request = new Request("getMenuChat", null);
		return (ArrayList<ChatEntry>) sendRequestWithResponse(request);
	}
}
