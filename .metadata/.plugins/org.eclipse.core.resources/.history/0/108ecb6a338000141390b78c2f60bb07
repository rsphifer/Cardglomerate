package view;

import java.util.ArrayList;
import java.util.LinkedList;

import misc.ChatEntry;
import model.Model;

import org.lwjgl.input.Mouse;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.gui.TextField;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;

import player.Player;
import cardgames.BlackJack;
import cardgames.CardGameType;
import cards.Card;

//this GUI needs to have 6 variables updated by the model and that is all
//curCard1, curCard2, playerSize, opponentSize, winner, and gameOver
//gets these when deck is clicked

public class BlackjackGame extends BasicGameState {

	private Model model;

	private boolean firstTime = true;
	private boolean firstCongrats = true;
	private String mouse = "No input yet";
	private Image background;
	private Image dealer;
	private Image arrow;
	private boolean isPlayersTurn = false;

	private Rectangle hitButton = new Rectangle(860, 650, 80, 50);
	private Rectangle stayButton = new Rectangle(950, 650, 80, 50);
	private Rectangle playAgainButton = new Rectangle(860, 590, 150, 50);
	private TextField betField;
	private Rectangle betButton = new Rectangle(980, 610, 50, 30);
	private boolean betSelected = false, betError = false;

	private boolean betsResolved = false;

	private int dealerScore, playerScore;
	private int ticksSinceDealerPlayed;
	private int lastBet;

	private String playerName = null;

	private TextField chatField;
	private boolean chatSelected, chatError;

	public BlackjackGame(int state, Model model) {
		this.model = model;
	}

	public void init(GameContainer gc, StateBasedGame sbg)
			throws SlickException {

		betField = new TextField(gc, gc.getDefaultFont(), 860, 610, 110, 30);

		// initialize and scale background image
		background = new Image("res/Green Background.jpg");
		background = background.getScaledCopy(1280, 720);
		// dealer = new Image("res/Dealer.png");
		dealer = new Image("res/DealerSmall.png");

		dealerScore = 0;
		playerScore = 0;
		ticksSinceDealerPlayed = 0;
		// back arrow
		arrow = new Image("res/Back Arrow.jpg");
		arrow = arrow.getScaledCopy(150, 150);

		chatField = new TextField(gc, gc.getDefaultFont(), 5, 680, 250, 30);
		chatSelected = true;
		chatError = false;

	}

	public void render(GameContainer gc, StateBasedGame sbg, Graphics g)
			throws SlickException {
		// render the background
		background.draw(0, 0);
		dealer.draw(270, 0);

		// mouse coordinates for testing / building
		g.drawString(mouse, 10, 25);

		g.draw(hitButton);
		g.drawString("Hit", 884, 662);
		g.draw(stayButton);
		g.drawString("Stay", 972, 662);

		g.drawString(playerName, 700, 650);
		g.drawString("Money: " + model.getPlayer().getMoney(), 700, 680);

		g.drawString("Bet: " + model.getPlayer().getCurrentBet(), 700, 590);
		g.drawString("Dealer", 700, 25);
		BlackJack game = (BlackJack) model.getCurrentGame();

		int status = game.getGameStatus();
		Player p = model.getPlayer();

		String[] playerList = game.getPlayerList();
		int playerIndex = 0;
		for (int i = 0; i < playerList.length; i++) {
			if (playerList[i].equals(p.userName)) {
				playerIndex = i;
				break;
			}
		}

		int othersDrawn = 0;

		if (model.isInGame) {

			/* Draw player cards and count */
			if (status == BlackJack.BET) {
				for (int i = 0; i < playerList.length; i++) {
					if (i == playerIndex) {
						g.drawString("Count: ???", 700, 620);
						if (game.getPlayerInHand(p)) {
							GameMenu.deckImage.draw(700, 440);
							GameMenu.deckImage.draw(720, 440);
						}
					} else if (!playerList[i].equals("Open")) {
						Player tmpPlayer = game.getPlayer(playerList[i]);
						if (othersDrawn == 0) {
							g.drawString("Count: ???", 1050, 620);
							if (game.getPlayerInHand(tmpPlayer)) {
								GameMenu.deckImage.draw(1050, 440);
								GameMenu.deckImage.draw(1070, 440);
							}
						} else {
							g.drawString("Count: ???", 390, 620);
							if (game.getPlayerInHand(tmpPlayer)) {
								GameMenu.deckImage.draw(390, 440);
								GameMenu.deckImage.draw(410, 440);
							}
						}
						othersDrawn++;
					}
				}

			} else {
				for (int i = 0; i < playerList.length; i++) {
					if (i == playerIndex) {
						g.drawString("Count: " + playerScore, 700, 620);
						ArrayList<Card> hand = game.getPlayerCards(p);
						for (int j = 0; j < hand.size(); j++) {
							getCardImage(hand.get(j)).draw(700 + j * 20, 440);
						}
					} else if (!playerList[i].equals("Open")) {
						Player tmpPlayer = game.getPlayer(playerList[i]);
						if (othersDrawn == 0) {
							g.drawString(
									"Count: "
											+ game.getPlayerScoreWithAces(tmpPlayer),
									1050, 620);

							ArrayList<Card> hand = game
									.getPlayerCards(tmpPlayer);
							for (int j = 0; j < hand.size(); j++) {
								getCardImage(hand.get(j)).draw(1050 + j * 20,
										440);
							}

						} else {
							g.drawString(
									"Count: "
											+ game.getPlayerScoreWithAces(tmpPlayer),
									390, 620);
							ArrayList<Card> hand = game
									.getPlayerCards(tmpPlayer);
							for (int j = 0; j < hand.size(); j++) {
								getCardImage(hand.get(j)).draw(390 + j * 20,
										440);
							}
						}
						othersDrawn++;
					}
				}

			}
			othersDrawn = 0;
			for (int i = 0; i < playerList.length; i++) {
				if (i != playerIndex && !playerList[i].equals("Open")) {
					Player tmpPlayer = game.getPlayer(playerList[i]);
					if (othersDrawn == 0) {
						g.drawString(playerList[i], 1050, 650);
						g.drawString("Money: " + tmpPlayer.getMoney(), 1050,
								680);
						g.drawString("Bet: " + tmpPlayer.getCurrentBet(), 1050,
								590);

					} else {
						g.drawString(playerList[i], 390, 650);
						g.drawString("Money: " + tmpPlayer.getMoney(), 390, 680);
						g.drawString("Bet: " + tmpPlayer.getCurrentBet(), 390,
								590);
					}
					othersDrawn++;
				}
			}
		}

		if (model.isInGame) {
			/* Draw dealer cards and count */
			if (status == BlackJack.BET) {
				GameMenu.deckImage.draw(700, 170);
				GameMenu.deckImage.draw(720, 170);
				g.drawString("Count: ???", 700, 55);

				if (betError) {
					g.drawString("Enter a valid bet", 860, 580);
				}

				g.draw(betButton);
				g.drawString("Bet", 991, 612);
				betField.render(gc, g);
			} else if (status == BlackJack.DEALER_TURN
					|| status == BlackJack.GAME_ENDED) {
				for (int j = 0; j < game.getDealerCards().size(); j++) {
					getCardImage(game.getDealerCards().get(j)).draw(
							700 + j * 20, 170);
				}

				g.drawString("Count: " + dealerScore, 700, 55);
			} else {
				getCardImage(game.getDealerCards().get(0)).draw(700, 170);
				GameMenu.deckImage.draw(720, 170);

				g.drawString("Count: ???", 700, 55);
			}
		}

		if (model.isInGame) {
			if (status == BlackJack.GAME_ENDED) {
				g.draw(playAgainButton);
				g.drawString("Play Again", 892, 602);
				int results = game.getGameResults(p);
				boolean betStatus = game.getAllBetsResolved();
				if (results == BlackJack.PLAYER_WIN) {
					g.drawString(model.getPlayer().userName + " won!", 675, 300);
				} else if (results == BlackJack.PLAYER_TIE) {
					g.drawString("Push!", 675, 300);
				} else if (results == BlackJack.PLAYER_LOSE) {
					g.drawString("Dealer won!", 675, 300);
				}
			} else {
				if (status == BlackJack.PLAYER_TURN || status == BlackJack.BET) {
					g.drawString(game.getCurrentTurnPlayer() + "'s turn", 675,
							350);
				} else {
					g.drawString("Dealer's turn", 675, 300);
				}
			}
		}

		arrow.draw(1130, 0);

		g.drawString("Chat", 150, 330);
		g.drawRect(260, 680, 120, 30);
		g.drawString("Send Message", 265, 685);
		chatField.render(gc, g);

		int curChatx = 5;
		int curChaty = 350;

		ArrayList<ChatEntry> chatLog = game.getChatLog();
		for (int i = 0; i < chatLog.size(); i++) {
			ChatEntry currMessage = chatLog.get(i);
			g.drawString(
					currMessage.getUsername() + ": " + currMessage.getMessage(),
					curChatx, curChaty);
			// g.drawString(currMessage.getMessage(), curChatx+90, curChaty);
			curChaty += 20;

		}

		if (chatError) {
			g.drawString("Message too long", 390, 685);
			if (!chatError) {
				g.clear();
			}
		}

	}

	// TODO(Richard): Generalize dealer chat messages
	// TODO(Richard): Time player actions to prevent player from locking table
	// up

	public void update(GameContainer gc, StateBasedGame sbg, int delta)
			throws SlickException {
		// mouse coordinates
		int xpos = Mouse.getX();
		int ypos = Mouse.getY();
		mouse = "Mouse position x: " + xpos + " y: " + ypos;

		// enter functionality
		Input in = gc.getInput();
		boolean enterHit = false;
		if (in.isKeyPressed(Input.KEY_ENTER)) {
			enterHit = true;
		}

		if (playerName == null) {
			playerName = model.getPlayer().userName;
		}

		BlackJack game = (BlackJack) model.getCurrentGame();
		int status = game.getGameStatus();

		if (firstTime) {

			model.addGameChatEntry("Greetings, " + model.getPlayer().userName
					+ ".", 1);
			game.updatePlayer(model.getPlayer());
			model.updateGame();
			firstTime = false;
		}

		int actualY = gc.getHeight() - ypos;
		Rectangle tmp = new Rectangle(xpos, actualY, 1, 1);

		isPlayersTurn = false;
		if (game.getCurrentTurnPlayer().equals(model.getPlayer().userName)) {
			isPlayersTurn = true;
		}

		if (status == BlackJack.GAME_ENDED
				&& !game.getPlayerBetResolved(model.getPlayer())) {
			Player p = model.getPlayer();
			int victoryCon = game.getGameResults(p);
			betsResolved = true;
			lastBet = p.getCurrentBet();
			if (victoryCon == BlackJack.PLAYER_WIN) {
				p.addMoney(p.getCurrentBet() * 2);
				p.bet(0);
			} else if (victoryCon == BlackJack.PLAYER_TIE) {
				p.addMoney(p.getCurrentBet());
				p.bet(0);
			} else {
				p.bet(0);
			}
			game.updatePlayer(p);
			game.setBetResolved(p);
			model.updateGame();

			if (isPlayersTurn) {
				String[] playerList = game.getPlayerList();
				for (int i = 0; i < playerList.length; i++) {
					if (!playerList[i].equals("Open")) {
						Player tmpPlayer = game.getPlayer(playerList[i]);
						if (game.getPlayerInHand(tmpPlayer)) {
							int results = game.getGameResults(tmpPlayer);
							int number = 0;
							if ((number=tmpPlayer.getCurrentBet()) == 0) {
								number = game.getPlayerLastBet(tmpPlayer);
							}
							
							if (results == BlackJack.PLAYER_WIN) {
								
								model.addGameChatEntry(tmpPlayer.userName
										+ " wins " + tmpPlayer.getCurrentBet()
										+ ".", 1);
							} else if (results == BlackJack.PLAYER_TIE) {
								model.addGameChatEntry(tmpPlayer.userName
										+ " ties.", 1);
							} else if (results == BlackJack.PLAYER_LOSE) {
								model.addGameChatEntry(tmpPlayer.userName
										+ " loses " + lastBet + ".", 1);
							}
						}
					}
				}
			}
		}

		if (betSelected && status == BlackJack.BET) {
			betField.setFocus(true);
		}
		if (status == BlackJack.BET
				&& ((xpos > 860 && xpos < 970) && (actualY > 590 && actualY < 640))) {
			if (Mouse.isButtonDown(0)) {
				chatSelected = false;
				chatField.setFocus(false);
				betField.setFocus(true);
				betSelected = true;
			}
		}

		if (chatSelected) {
			chatField.setFocus(true);
		}

		// chat textbox clicked
		if ((xpos > 5 && xpos < 255) && (ypos > 10 && ypos < 40)) {
			if (Mouse.isButtonDown(0)) { // button 0 = left click
				chatSelected = true;
			}
		}

		// send chat message button clicked
		int userNameLength = model.getPlayer().userName.length();
		if (((xpos > 260 && xpos < 380) && (ypos > 10 && ypos < 40))
				|| enterHit) {
			if ((Mouse.isButtonDown(0) && Master.isMouseReleased) || enterHit) {
				Master.isMouseReleased = false;
				if (chatField.getText().length() > 1) {
					// code to send chat message to server goes here
					String newMessage = chatField.getText();
					if ((newMessage.length() + userNameLength) <= 37) {
						model.addGameChatEntry(newMessage, 0);
						chatError = false;
					} else if ((newMessage.length() + (userNameLength * 2)) <= 74) {
						// split message in two and send both
						String temp = newMessage.substring(0,
								(37 - userNameLength));
						model.addGameChatEntry(temp, 0);
						temp = newMessage.substring(37 - userNameLength);
						model.addGameChatEntry(temp, 0);
						chatError = false;
					}

					else if ((newMessage.length() + (userNameLength * 3)) <= 110) {
						// split message into 3 and send all
						String temp = newMessage.substring(0,
								(37 - userNameLength));
						model.addGameChatEntry(temp, 0);
						temp = newMessage.substring((37 - userNameLength),
								(74 - (userNameLength * 2)));
						model.addGameChatEntry(temp, 0);
						temp = newMessage
								.substring((74 - (userNameLength * 2)));
						model.addGameChatEntry(temp, 0);

					}

					else {
						chatError = true;
					}

					chatField.setText("");
				}
			}

			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		/* Bet button selected */
		if (betButton.contains(tmp) || betButton.intersects(tmp)) {
			if (Mouse.isButtonDown(0) && Master.isMouseReleased) {
				Master.isMouseReleased = false;

				if (status == BlackJack.BET && isPlayersTurn) {
					String s;
					if (!(s = betField.getText()).isEmpty() && isNumeric(s)) {
						int bet = Integer.parseInt(s);
						if (bet > 0 && model.getPlayer().getMoney() >= bet) {
							game.playerBet(model.getPlayer(), bet);
							game.updatePlayer(model.getPlayer());
							model.updateGame();
							betError = false;
						} else {
							betError = true;
						}
					} else {
						betError = true;
					}
					betField.setText("");
				}
			}
			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		if (model.gameType != CardGameType.Blackjack) {
			model.gameType = CardGameType.Blackjack;
		}

		/* Hit button selected */
		if (hitButton.contains(tmp) || hitButton.intersects(tmp)) {
			if (Mouse.isButtonDown(0) && Master.isMouseReleased) {
				Master.isMouseReleased = false;

				if (status == BlackJack.PLAYER_TURN && isPlayersTurn) {
					game.playerHit(model.getPlayer());
					model.updateGame();
				}

			}

			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		/* Stay button selected */
		if (stayButton.contains(tmp) || stayButton.intersects(tmp)) {
			if (Mouse.isButtonDown(0) && Master.isMouseReleased) {
				Master.isMouseReleased = false;
				if (status == BlackJack.PLAYER_TURN && isPlayersTurn) {
					game.playerStay(model.getPlayer());
					model.updateGame();
				}
			}

			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		/* Play again button selected */
		if (playAgainButton.contains(tmp) || playAgainButton.intersects(tmp)) {
			if (Mouse.isButtonDown(0) && Master.isMouseReleased) {
				Master.isMouseReleased = false;
				if (status == BlackJack.GAME_ENDED) {
					game.resetGame();
					firstCongrats = true;
					betsResolved = false;
					model.updateGame();
				}
			}

			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		/* Dealer is playing */
		/* Only let client who has control to update dealer */
		if (isPlayersTurn && status == BlackJack.DEALER_TURN) {

			if (game.getAllPlayersBust() || game.getDealerScoreWithAces() >= 17) {
				game.dealerStay();
				model.updateGame();
			} else if (++ticksSinceDealerPlayed > 60) {
				game.dealerHit();
				model.updateGame();
				ticksSinceDealerPlayed = 0;
			}
		}

		// back button clicked
		if ((xpos > 1130 && xpos < 1280) && (actualY > 0 && actualY < 150)) {
			if (Mouse.isButtonDown(0) && Master.isMouseReleased) {
				Master.isMouseReleased = false;
				firstTime = true;
				firstCongrats = true;
				model.isInGame = false;
				game.removePlayer(model.getPlayer());
				model.updateGame();
				model.updateAchievements();
				sbg.enterState(1); // display game menu screen
			}

			if (!Mouse.isButtonDown(0)) {
				Master.isMouseReleased = true;
			}
		}

		if (model.isInGame) {
			playerScore = game.getPlayerScoreWithAces(model.getPlayer());
			dealerScore = game.getDealerScoreWithAces();

		}

	}

	public boolean isNumeric(String str) {
		int x;
		try {
			x = Integer.parseInt(str);
		} catch (NumberFormatException nfe) {
			return false;
		}
		return true;
	}

	private Image getCardImage(Card c) {

		// 0 = hearts, 1 = diamonds, 2 = spades, 3 = clubs
		switch (c.getSuit()) {

		case 0:
			return GameMenu.hearts[c.getPower() - 1];

		case 1:
			return GameMenu.diamonds[c.getPower() - 1];

		case 2:
			return GameMenu.spades[c.getPower() - 1];

		case 3:
			return GameMenu.clubs[c.getPower() - 1];
		}
		return null;

	}

	public int getID() {
		return 10;
	}
}
