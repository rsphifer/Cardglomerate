package cardgames;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedList;

import player.Player;
import cards.Card;

public class BlackJack extends CardGame implements Serializable {
	
	
	
	public static final int PLAYER_WIN = 1;
	public static final int PLAYER_LOSE = 2;
	public static final int PLAYER_TIE = 3;
	
	
	public static final int BET = 1;
	public static final int PLAYER_TURN = 2;
	public static final int DEALER_TURN = 3;
	public static final int GAME_ENDED = 4;
	public static final int IDLE = 5;
	
	public static final int MAX_PLAYERS = 3;
	private PlayerSeat[] players;
	private int numPlayers;
	private int currentTurn; /* Index of players entry for player who currently has control */
	
	private ArrayList<Card> dealerHand;
	int dealerStay;
	private ArrayList<Card> playerHand;
	int playerStay;
	
	private int gameStatus = GAME_ENDED;
	
	
	public boolean handStarted = true;
	public boolean gameEnded = false;
	public boolean waitingOnPlayer = true;
	public boolean playerBusted = false, dealerBusted = false;
	public boolean playerWon = false;
	public boolean isTie = false;
	

	public BlackJack(){
		players = new PlayerSeat[MAX_PLAYERS];
		for (int i=0; i<MAX_PLAYERS; i++) {
			players[i] = new PlayerSeat();
		}
		
		dealerHand = new ArrayList<Card>();
		numPlayers = 0;
		//playerHand = new ArrayList<Card>();
		playerStay = 0;
		dealerStay = 0;
		gameStatus = IDLE;
		fillDeck();
		dealCards();
	}
	
	public Player getPlayer(String playerName) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(playerName)) {
				return players[i].getPlayer();
			}
		}
		return null;
	}
	
	public String[] getPlayerList() {
		String[] playerList = new String[MAX_PLAYERS];
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied) {
				playerList[i] = players[i].getPlayer().userName; 
			} else {
				playerList[i] = "Open";
			}
		}
		return playerList;
	}
	
	public int getNumPlayers() {
		return numPlayers;
	}
	
	public void addPlayer(Player p) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (!players[i].isOccupied) {
				players[i].addPlayer(p);
				numPlayers++;
				if (numPlayers == 1) {
					/* Is first player */
					
					resetGame();
				}
				return;
			}
		}
		
	}
	
	public void removePlayer(Player p) {
		PlayerSeat seat;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				players[i].removePlayer();
				numPlayers--;
				if (numPlayers == 0) {
					/* Table is now empty */
					gameStatus = IDLE;
				}
				return;
			}
		}
		
	}
	
	public void resetGame() {
		dealerHand = new ArrayList<Card>();
		
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied) {
				players[i].resetHand();
			}
		}
		
		/* Set current turn to first player found in players array */
		currentTurn = 0;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].isInHand) {
				currentTurn = i;
				break;
			}
		}
		
		fillDeck();
		
		dealCards();
		handStarted = true;
		
		gameStatus = BET;
		waitingOnPlayer = true;
		playerBusted = dealerBusted = false;
		playerWon = false;
		isTie = false;
	}
	
	public void dealCards(){
		
		for (int i=0; i<2; i++) {
			for (int j=0; j<MAX_PLAYERS; j++) {
				if (players[j].isOccupied && players[j].isInHand) {
					players[j].addCard(getTopOfDeck());
				}
			}
			dealerHand.add(getTopOfDeck());
		}
	}
	
	public void updatePlayer(Player p) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				players[i].updatePlayer(p);
			}
		}
	}
	
	
	public String getCurrentTurnPlayer() {
		return players[currentTurn].getPlayer().userName;
	}
	
	public void playerBet(Player p, int bet) {
		PlayerSeat seat = null;
		int seatIndex = -1;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				seatIndex = i;
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return;
		}
		
		
		p.bet(bet);
		p.addMoney(-bet);
		
		
		/* Code to go to next player */
		boolean lastPlayer = true;
		players[seatIndex].hasBet = true;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].isInHand && !players[i].hasBet) {
				currentTurn = i;
				lastPlayer = false;
			}
		}
		if (lastPlayer) {
			/* Go to playing round and set current turn to first person in players array */
			System.out.printf("last player went\n");
			gameStatus = PLAYER_TURN;
			currentTurn = 0;
			for (int i=0; i<MAX_PLAYERS; i++) {
				if (players[i].isOccupied && players[i].isInHand) {
					currentTurn = i;
					break;
				}
			}
		}
		
	}
	
	public int getPlayerScore(PlayerSeat seat){
		
		int sizeOfHand = seat.getHand().size();
		int handScore = 0;
		int power;
		
		for (int i=0; i<sizeOfHand; i++) {
			power = seat.getHand().get(i).getPower();
			if (power > 10) {
				handScore += 10;
			} else if (power == 1) {
				handScore += 11;
			} else {
				handScore += power;
			}
		}
		return handScore;
		
	}
	
	public int getGameStatus() {
		return gameStatus;
	}
	
	public boolean getAllPlayersBust() {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && !players[i].hasBusted) {
				return false;
			}
		}
		return true;
	}
	
	public int getPlayerScoreWithAces(Player p){
		PlayerSeat seat = null;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return -1;
		}
		
		int score;
		if((score = getPlayerScore(seat)) < 22){
			return score;
		}
		int numAces = 0;
		int sizeOfHand = seat.getHand().size();
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = seat.getHand().get(i).getPower();
			if(power == 1){
				numAces += 1;
			}
		}
		int newScore = getPlayerScore(seat);
		while(numAces != 0){
			newScore -= 10;
			numAces--;
			if(newScore <= 21){
				return newScore;
			}
		}
		return newScore;
	}
	
	public int getDealerScore(){
		int sizeOfHand = dealerHand.size();
		int handScore = 0;
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = dealerHand.get(i).getPower();
			if(power > 10){
				handScore += 10;
			}
			else if(power == 1){
				handScore += 11;
			}
			else
				handScore += power;
		}
		return handScore;
	}
	
	public int getDealerScoreWithAces(){
		if(getDealerScore() < 22){
			return getDealerScore();
		}
		int numAces = 0;
		int sizeOfHand = dealerHand.size();
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = dealerHand.get(i).getPower();
			if(power == 1){
				numAces += 1;
			}
		}
		int newScore = getDealerScore();
		while(numAces != 0){
			newScore -= 10;
			numAces--;
			if(newScore <= 21){
				return newScore;
			}
		}
		return newScore;
	}
	
	
	public void playerHit(Player p) {
		
		PlayerSeat seat = null;
		int seatIndex = -1;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				seatIndex = i;
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return;
		}
		
		seat.addCard(getTopOfDeck());
		if (getPlayerScoreWithAces(p) > 21) {
			
			players[seatIndex].hasBusted = true;
			waitingOnPlayer = false;
			
			boolean lastPlayer = true;
			players[seatIndex].hasPlayed = true;
			for (int i=0; i<MAX_PLAYERS; i++) {
				if (players[i].isOccupied && !players[i].hasPlayed) {
					currentTurn = i;
					lastPlayer = false;
				}
			}
			if (lastPlayer) {
				gameStatus = DEALER_TURN;
				
				currentTurn = 0;
				for (int i=0; i<MAX_PLAYERS; i++) {
					if (players[i].isOccupied) {
						currentTurn = i;
						break;
					}
				}
			}
		}
	}
	
	public void playerStay(Player p) {
		PlayerSeat seat = null;
		int seatIndex = -1;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				seatIndex = i;
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return;
		}
		
		waitingOnPlayer = false;
		
		boolean lastPlayer = true;
		players[seatIndex].hasPlayed = true;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && !players[i].hasPlayed) {
				currentTurn = i;
				lastPlayer = false;
			}
		}
		if (lastPlayer) {
			gameStatus = DEALER_TURN;
			
			currentTurn = 0;
			for (int i=0; i<MAX_PLAYERS; i++) {
				if (players[i].isOccupied) {
					currentTurn = i;
					break;
				}
			}
		}
	}
	
	public void dealerHit() {
		dealerHand.add(getTopOfDeck());
		if (getDealerScoreWithAces() > 21) {
			gameStatus = GAME_ENDED;
			gameEnded = true;
			
			for (int i=0; i<MAX_PLAYERS; i++) {
				if (players[i].isOccupied) {
					players[i].setGameResult(getResult(players[i]));
				}
			}
			
		}
	}
	
	public void dealerStay() {
		gameStatus = GAME_ENDED;
		gameEnded = true;
		
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied) {
				players[i].setGameResult(getResult(players[i]));
			}
		}

	}
	

	
	
	
	
	
	
	public int getResult(PlayerSeat seat){
		int playerScore = getPlayerScoreWithAces(seat.getPlayer());
		int dealerScore = getDealerScoreWithAces();
		
		if(playerScore > 21){
			return PLAYER_LOSE;
		}
		else if(playerScore == dealerScore){
			return PLAYER_TIE;
		}
		else if(dealerScore > playerScore && dealerScore <= 21){
			return PLAYER_LOSE;
		}
		else
			return PLAYER_WIN;
	}
	
	
	public int getGameResults(Player p) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				return players[i].getGameResult();
			}
		}
		System.err.printf("Player not found in table in getGameResults!\n");
		return -1;
	}
	
	public ArrayList<Card> getPlayerCards(Player p) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				return players[i].getHand();
			}
		}
		System.err.printf("Player not found in table in getPlayerCards!\n");
		return null;
	}
	
	public ArrayList<Card> getDealerCards() {
		return dealerHand;
	}
	
	
	public static void main(String[] args){
		BlackJack test1 =  new BlackJack();
		//test1.playBlackJack();
		//test1.playBlackJack();
		//test1.seePlayerHand();
	}
	
	private class PlayerSeat implements Serializable {
		
		private Player player;
		private ArrayList<Card> hand;
		public boolean isOccupied, hasBet, hasPlayed, hasBusted;
		public boolean isInHand;
		private int gameResult;
		
		
		public PlayerSeat() {
			player = null;
			isOccupied = false;
			hand = null;
		}
		
		public void updatePlayer (Player p) {
			this.player = p;
		}
		
		public Player getPlayer() {
			return player;
		}
		
		public void addPlayer(Player player) {
			this.player = player;
			isOccupied = true;
			isInHand = false;
			hand = new ArrayList<Card>();
		}
		
		public void removePlayer() {
			player = null;
			isOccupied = false;
			hand = null;
		}
		
		public void setGameResult(int result) {
			gameResult = result;
		}
		
		public int getGameResult() {
			return gameResult;
		}
		
		public ArrayList<Card> getHand() {
			return hand;
		}
		
		public void addCard(Card card) {
			if (hand != null) {
				hand.add(card);
			} else {
				System.err.printf("Tried to add a card to a null hand!\n");
			}
		}
		
		public void resetHand() {
			if (hand != null) {
				hand = new ArrayList<Card>();
				hasBet = false;
				hasPlayed = false;
				hasBusted = false;
				isInHand = true;
			} else {
				System.err.printf("Tried to reset a null hand!\n");
			}
		}
	}

	@Override
	public void setup() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void testSetup() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayList<Player> getWinner() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Integer> getHandSizes() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean getGameover() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public LinkedList<Card> getCardsToDisplay() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Player> getPlayers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Player getTurn() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getPot() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getExpectedBet() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean updateReady() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public void setBet(Player p, int bet) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void nextTurn(Player curP) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fold(Player p) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isHandOver() {
		// TODO Auto-generated method stub
		return false;
	}
}

