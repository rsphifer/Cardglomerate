package cardgames;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

import player.Player;
import cards.Card;

public class BlackJack extends CardGame implements Serializable {
	
	
	
	public static final int PLAYER_WIN = 1;
	public static final int PLAYER_LOSE = 2;
	public static final int PLAYER_TIE = 3;
	
	
	public static final int BET = 1;
	public static final int PLAYER_TURN = 2;
	public static final int DEALER_TURN = 3;
	public static final int GAME_ENDED = 4;
	public static final int IDLE = 5;
	
	public static final int MAX_PLAYERS = 3;
	private PlayerSeat[] players;
	private int numPlayers;
	
	
	private ArrayList<Card> dealerHand;
	int dealerStay;
	private ArrayList<Card> playerHand;
	int playerStay;
	
	private int gameStatus = GAME_ENDED;
	
	public boolean handStarted = true;
	public boolean gameEnded = false;
	public boolean waitingOnPlayer = true;
	public boolean playerBusted = false, dealerBusted = false;
	public boolean playerWon = false;
	public boolean isTie = false;
	

	public BlackJack(){
		players = new PlayerSeat[MAX_PLAYERS];
		for (int i=0; i<MAX_PLAYERS; i++) {
			players[i] = new PlayerSeat();
		}
		
		dealerHand = new ArrayList<Card>();
		numPlayers = 0;
		//playerHand = new ArrayList<Card>();
		playerStay = 0;
		dealerStay = 0;
		gameStatus = BET;
		fillDeck();
		dealCards();
	}
	
	public void addPlayer(Player p) {
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (!players[i].isOccupied) {
				players[i].addPlayer(p);
				numPlayers++;
				return;
			}
		}
		
	}
	
	public void removePlayer(Player p) {
		PlayerSeat seat;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				players[i].removePlayer();
			}
		}
		
	}
	
	public void resetGame() {
		dealerHand = new ArrayList<Card>();
		//playerHand = new ArrayList<Card>();
		
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied) {
				players[i].resetHand();
			}
		}
		
		fillDeck();
		
		dealCards();
		handStarted = true;
		
		gameStatus = BET;
		waitingOnPlayer = true;
		playerBusted = dealerBusted = false;
		playerWon = false;
		isTie = false;
	}
	
	public void dealCards(){
//		playerHand.add(getTopOfDeck());
//		dealerHand.add(getTopOfDeck());
//		playerHand.add(getTopOfDeck());
//		dealerHand.add(getTopOfDeck());
		
		for (int i=0; i<2; i++) {
			for (int j=0; j<MAX_PLAYERS; j++) {
				if (players[j].isOccupied) {
					players[j].addCard(getTopOfDeck());
				}
			}
			dealerHand.add(getTopOfDeck());
		}
	}
	
//	public void seePlayerHand(){
//		int sizeOfHand = playerHand.size();
//		for(int i = 0; i < sizeOfHand;i++){
//			System.out.println("Card is Suit ="+playerHand.get(i).getSuit()+"Power"+playerHand.get(i).getPower());
//		}	
//		System.out.println("Your combined hand is = to "+getPlayerScoreWithAces());
//	}
	
	public void seeDealerHand(){
		int sizeOfHand = dealerHand.size();
		for(int i = 0; i < sizeOfHand;i++){
			System.out.println("Card is Suit ="+dealerHand.get(i).getSuit()+"Power"+dealerHand.get(i).getPower());
		}	
		System.out.println("Your combined hand is = to "+getDealerScoreWithAces());
	}
	
	public void playerBet(Player p, int bet) {
		//TODO(RICHARD): Fix this to go to next players turn
		p.bet(bet);
		p.addMoney(-bet);
		/* Code to go to next player */
		
		gameStatus = PLAYER_TURN;
	}
	
	public int getPlayerScore(PlayerSeat seat){
		
		int sizeOfHand = seat.getHand().size();
		int handScore = 0;
		int power;
		
		for (int i=0; i<sizeOfHand; i++) {
			power = seat.getHand().get(i).getPower();
			if (power > 10) {
				handScore += 10;
			} else if (power == 1) {
				handScore += 11;
			} else {
				handScore += power;
			}
		}
		return handScore;
		
	}
	
	public int getGameStatus() {
		return gameStatus;
	}
	
	public int getPlayerScoreWithAces(Player p){
		PlayerSeat seat = null;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return -1;
		}
		
		int score;
		if((score = getPlayerScore(seat)) < 22){
			return score;
		}
		int numAces = 0;
		int sizeOfHand = seat.getHand().size();
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = seat.getHand().get(i).getPower();
			if(power == 1){
				numAces += 1;
			}
		}
		int newScore = getPlayerScore(seat);
		while(numAces != 0){
			newScore -= 10;
			numAces--;
			if(newScore <= 21){
				return newScore;
			}
		}
		return newScore;
	}
	
	public int getDealerScore(){
		int sizeOfHand = dealerHand.size();
		int handScore = 0;
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = dealerHand.get(i).getPower();
			if(power > 10){
				handScore += 10;
			}
			else if(power == 1){
				handScore += 11;
			}
			else
				handScore += power;
		}
		return handScore;
	}
	
	public int getDealerScoreWithAces(){
		if(getDealerScore() < 22){
			return getDealerScore();
		}
		int numAces = 0;
		int sizeOfHand = dealerHand.size();
		int power;
		for(int i = 0; i < sizeOfHand;i++){
			power = dealerHand.get(i).getPower();
			if(power == 1){
				numAces += 1;
			}
		}
		int newScore = getDealerScore();
		while(numAces != 0){
			newScore -= 10;
			numAces--;
			if(newScore <= 21){
				return newScore;
			}
		}
		return newScore;
	}
	
//	public void dealerPlay(){
//		if(getPlayerScoreWithAces() <= 21 && getDealerScoreWithAces() <= 21){
//			int dealerScore = getDealerScoreWithAces();
//			if(dealerScore < 15){
//				dealerHand.add(getTopOfDeck());
//			}
//			else
//				dealerStay = 1;
//		}
//		else
//			dealerStay = 1;
//	}
//	
//	public void playerPlay(){
//		int breaker = 0;
//		if(getPlayerScoreWithAces() <= 21){
//			if(playerStay != 1){
//				seePlayerHand();
//				System.out.println();
//				int valueEntered = 0;
//				while(breaker == 0){
//					System.out.println("To Hit Press 1, To Stay press 2");
//					Scanner player1Input = new Scanner( System.in );
//					valueEntered = player1Input.nextInt();
//					if(valueEntered == 1){
//						System.out.println("value entered = "+valueEntered);
//						playerHand.add(getTopOfDeck());
//						breaker = 1;
//					}
//					else if(valueEntered == 2){
//						System.out.println("value entered = "+valueEntered);
//						playerStay = 1;
//						breaker = 1;
//					}
//				}
//			}
//		}
//		else 
//			playerStay = 1;
//	}
	
	public void playerHit(Player p) {
		
		PlayerSeat seat = null;
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied && players[i].getPlayer().userName.equals(p.userName)) {
				seat = players[i];
				break;
			}
		}
		
		if (seat == null) {
			System.err.printf("Player passed to getPlayerScoreWithAces not found!\n");
			return;
		}
		
		seat.addCard(getTopOfDeck());
		if (getPlayerScoreWithAces(p) > 21) {
			//TODO(RICHARD) Fix this to go to next turn if not the last player or dealer if it is
			gameStatus = DEALER_TURN;
			playerBusted = true;
			waitingOnPlayer = false;
		}
	}
	
	public void playerStay() {
		//TODO(RICHARD) Fix this to go next turn or to dealer if it's the last player
		gameStatus = DEALER_TURN;
		waitingOnPlayer = false;
	}
	
	public void dealerHit() {
		dealerHand.add(getTopOfDeck());
		if (getDealerScoreWithAces() > 21) {
			gameStatus = GAME_ENDED;
			gameEnded = true;
			
			for (int i=0; i<MAX_PLAYERS; i++) {
				if (players[i].isOccupied) {
					players[i].setGameResult(getResult(players[i]));
				}
			}
			
//			if (gameWinner() == 2) {
//				playerWon = true;
//			} else if (gameWinner() == 3) {
//				/* tie */
//				isTie = true;
//			} else {
//				playerWon = false;
//			}
		}
	}
	
	public void dealerStay() {
		gameStatus = GAME_ENDED;
		gameEnded = true;
		
		for (int i=0; i<MAX_PLAYERS; i++) {
			if (players[i].isOccupied) {
				players[i].setGameResult(getResult(players[i]));
			}
		}
//		if (gameWinner() == 2) {
//			playerWon = true;
//		} else if (gameWinner() == 3) {
//			/* tie */
//			playerWon = false;
//			isTie = true;
//		} else {
//			playerWon = false;
//		}
	}
	

	
	
//	public void dealerVsPlayerPlay(){
//		while(playerStay != 1){
//			playerPlay();
//		}
//		while(dealerStay != 1){
//			dealerPlay();
//		}
//		
//	}
	
	
//	public void playBlackJack(){
//		dealCards();
//		dealerVsPlayerPlay();
//		int result = gameWinner();
//		if(result == 1){
//			System.out.println("The Dealer won with the cards:");
//			seeDealerHand();
//			System.out.println("The player had these cards:");
//			seePlayerHand();
//		}
//		else if(result == 2){
//			System.out.println("The Player won with the cards:");
//			seePlayerHand();
//			System.out.println("The Dealer had these cards:");
//			seeDealerHand();
//		}
//	}
	
	
	public int getResult(PlayerSeat seat){
		int playerScore = getPlayerScoreWithAces(seat.getPlayer());
		int dealerScore = getDealerScoreWithAces();
		
		if(playerScore > 21){
			return PLAYER_LOSE;
		}
		else if(playerScore == dealerScore){
			return PLAYER_TIE;
		}
		else if(dealerScore > playerScore && dealerScore <= 21){
			return PLAYER_LOSE;
		}
		else
			return PLAYER_WIN;
	}
	
	public ArrayList<Card> getPlayerCards() {
		return playerHand;
	}
	
	public ArrayList<Card> getDealerCards() {
		return dealerHand;
	}
	
	
	public static void main(String[] args){
		BlackJack test1 =  new BlackJack();
		//test1.playBlackJack();
		//test1.playBlackJack();
		//test1.seePlayerHand();
	}
	
	private class PlayerSeat {
		
		private Player player;
		private ArrayList<Card> hand;
		public boolean isOccupied;
		private int gameResult;
		
		public PlayerSeat() {
			player = null;
			isOccupied = false;
			hand = null;
		}
		
		public Player getPlayer() {
			return player;
		}
		
		public void addPlayer(Player player) {
			this.player = player;
			isOccupied = true;
			hand = new ArrayList<Card>();
		}
		
		public void removePlayer() {
			player = null;
			isOccupied = false;
			hand = null;
		}
		
		public void setGameResult(int result) {
			gameResult = result;
		}
		
		public int getGameResult() {
			return gameResult;
		}
		
		public ArrayList<Card> getHand() {
			return hand;
		}
		
		public void addCard(Card card) {
			if (hand != null) {
				hand.add(card);
			} else {
				System.err.printf("Tried to add a card to a null hand!\n");
			}
		}
		
		public void resetHand() {
			if (hand != null) {
				hand = new ArrayList<Card>();
			} else {
				System.err.printf("Tried to reset a null hand!\n");
			}
		}
	}

	@Override
	public void setup() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void testSetup() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayList<Player> getWinner() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Integer> getHandSizes() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void update() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean getGameover() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public LinkedList<Card> getCardsToDisplay() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Player> getPlayers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Player getTurn() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getPot() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getExpectedBet() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean updateReady() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public void setBet(Player p, int bet) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void nextTurn(Player curP) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fold(Player p) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isHandOver() {
		// TODO Auto-generated method stub
		return false;
	}
}

